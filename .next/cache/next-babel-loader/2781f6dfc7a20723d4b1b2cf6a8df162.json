{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment, useCallback, useState, useRef } from \"react\";\nimport 'react-dropdown/style.css';\nimport { Card, Form, Tabs, Checkbox, ChoiceList, Button, Heading, EmptyState, AppProvider, Layout, Page, Stack, ActionList, Avatar, ContextualSaveBar, FormLayout, Frame, Loading, Modal, Navigation, SkeletonBodyText, SkeletonDisplayText, SkeletonPage, TextContainer, TextField, Toast, TopBar, Link } from \"@shopify/polaris\";\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { ArrowLeftMinor, NoteMajorMonotone, HomeMajorMonotone, OrdersMajorTwotone, MobileHamburgerMajorMonotone, ListMajorMonotone, BankMajorMonotone, TroubleshootMajorMonotone, SettingsMajorMonotone } from '@shopify/polaris-icons';\nimport Dropdown from 'react-dropdown';\n\nconst AttCompany = props => {\n  const initialFormState = {\n    id: null,\n    code: '',\n    label: '',\n    Type: '',\n    sortingorder: '',\n    status: '',\n    cartpage: '',\n    registerpage: '',\n    accountpage: '',\n    ordergrid: '',\n    customergrid: ''\n  };\n  const {\n    0: Atributo,\n    1: setAtributo\n  } = useState(initialFormState);\n\n  const handleInputChange = event => {\n    const {\n      code,\n      value\n    } = event.target;\n    setUser(_objectSpread(_objectSpread({}, Atributo), {}, {\n      [name]: value\n    }));\n  };\n\n  const {\n    0: selectedTab,\n    1: setSelectedTab\n  } = useState(0);\n  const handleTabChange = useCallback(selectedTabIndex => setSelectedTab(selectedTabIndex), []);\n  const tabs = [{\n    id: 'FormCompany',\n    content: 'Properties',\n    accessibilityLabel: 'All customers',\n    panelID: 'all-customers-content'\n  }];\n  const options = [{\n    label: 'None',\n    value: 'None'\n  }, {\n    label: 'Decimal Number',\n    value: 'Decimal Number'\n  }, {\n    label: 'Integer Number',\n    value: 'Integer Number'\n  }, {\n    label: 'Email',\n    value: 'Email'\n  }, {\n    label: 'URL',\n    value: 'URL'\n  }, {\n    label: 'Letters',\n    value: 'Letters'\n  }, {\n    label: 'Letters (a-z, A-Z) or Numbers (0-9) ',\n    value: 'Letters (a-z, A-Z) or Numbers (0-9) '\n  }, {\n    label: 'Custom',\n    value: 'Custom'\n  }];\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(['hidden']);\n  const handleChange = useCallback(value => setSelected(value), []);\n  const {\n    0: textFieldValue,\n    1: setTextFieldValue\n  } = useState('');\n  const handleTextFieldChange = useCallback(value => setTextFieldValue(value), []);\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n  const handleChangePh = useCallback(newValue => setValue(newValue), []);\n  const {\n    0: valueDV,\n    1: setValueDV\n  } = useState('');\n  const handleChangeDV = useCallback(newValueDV => setValueDV(newValueDV), []);\n  const handleChangeNo = useCallback(newValueNo => setValueNo(newValueNo), []);\n  const {\n    0: valueNo,\n    1: setValueNo\n  } = useState('1');\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(false);\n  const handleChangeSingle = useCallback(newChecked => setChecked(newChecked), []);\n  {\n    /*navbar */\n  }\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    sectioned: true,\n    title: \" Attribute Your company\"\n  }, __jsx(Stack, {\n    distribution: \"leading\"\n  }, __jsx(Link, {\n    url: \"/Index\"\n  }, \"Home\"), __jsx(Link, {\n    url: \"/AttributesTemplates\"\n  }, \"Attributes Templates\"), __jsx(\"p\", null, \"Attribute\"))), __jsx(Stack, {\n    distribution: \"trailing\"\n  }, __jsx(Button, {\n    primary: true\n  }, __jsx(Stack, {\n    distribution: \"equalSpacing\"\n  }, __jsx(\"p\", null, \"Add Attribute\")))), __jsx(Page, null, __jsx(Card, null, __jsx(Tabs, {\n    tabs: tabs,\n    selected: selectedTab,\n    onSelect: handleTabChange\n  }, __jsx(Card.Section, null, __jsx(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      if (!Atributo.code || !Atributo.label || !Atributo.Type || !Atributo.sortingorder || !Atributo.status || !Atributo.cartpage || !Atributo.registerpage || !Atributo.accountpage || !Atributo.ordergrid || !Atributo.customergrid) return;\n      props.addAtributo(Atributo);\n      setAtributo(initialFormState);\n    }\n  }, __jsx(Card, {\n    sectioned: true,\n    title: \"Attribute Properties\"\n  }, __jsx(\"hr\", null), __jsx(TextField, {\n    label: \"Label*:\",\n    name: \"label\",\n    value: Atributo.label,\n    onChange: handleInputChange,\n    placeholder: \"Your Company\"\n  }), __jsx(\"p\", null, \"Attribute label\"), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"Code:\",\n    placeholder: \"your-company\",\n    value: Atributo.code,\n    onChange: handleInputChange,\n    name: \"code\",\n    disabled: true\n  }), __jsx(\"p\", null, \"For internal use. Must be unique with no spaces and length  <= 30. Let it empty for auto generation\"), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"Sorting Order:\",\n    type: \"number\",\n    value: valueNo,\n    onChange: handleChangeNo\n  }), __jsx(\"p\", null, \"Attributes are sorted in ascending order (eg: Attribute with sorting order 1 will be displayed on top of Attribute 2)\"), __jsx(\"br\", null), __jsx(\"p\", null, \"Type*:\"), __jsx(Dropdown, {\n    placeholder: \"Text Field\",\n    disabled: true\n  }), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"Default value:\",\n    value: valueDV,\n    onChange: handleChangeDV\n  }), __jsx(\"p\", null, \"The default value for this attribute when it is shown to your customers\"), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"Placeholder:\",\n    value: value,\n    onChange: handleChangePh\n  }), __jsx(\"p\", null, \"The placeholder specifies a short hint that describes the expected value of this field\"), __jsx(\"br\", null), __jsx(Checkbox, {\n    label: \"Values Required\",\n    checked: checked,\n    onChange: handleChangeSingle\n  }), __jsx(\"p\", null, \"Tick if this attribute is required to be filled by your customers\"), __jsx(\"br\", null), __jsx(\"p\", null, \"Input Validation:\"), __jsx(Dropdown, {\n    options: options,\n    placeholder: \"None\"\n  }), __jsx(\"p\", null, \"Attribute options is managed in tab \\\"Manage Options\\\" on the left.\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(Heading, null, \"Attribute Configuration\"), __jsx(\"br\", null), __jsx(\"hr\", null), __jsx(ChoiceList, {\n    allowMultiple: true,\n    choices: [{\n      label: 'Show on Cart page:',\n      value: 'shipping',\n      helpText: 'Tick if you want to use this attribute on cart page.'\n    }, {\n      label: 'Hide if filled:',\n      value: 'confirmation',\n      helpText: 'Hide this attribute if it was filled before.'\n    }, {\n      label: 'Show on Order grid:',\n      value: 'shipping',\n      helpText: 'Tick if you want to use this attribute on order grid in app admin.'\n    }, {\n      label: 'Show on Register page:',\n      value: 'confirmation',\n      helpText: 'Tick if you want to use this attribute on register page.'\n    }, {\n      label: 'Show on Customer grid',\n      value: 'confirmation',\n      helpText: 'Tick if you want to use this attribute on customer grid in app admin'\n    }],\n    selected: selected,\n    onChange: handleChange\n  })))))), __jsx(\"br\", null)));\n};\n\nexport default AttCompany;","map":{"version":3,"sources":["C:/Users/LENOVO THINKPAD/Documents/react_programs/ca-app/pages/AttributeCompany.js"],"names":["React","Fragment","useCallback","useState","useRef","Card","Form","Tabs","Checkbox","ChoiceList","Button","Heading","EmptyState","AppProvider","Layout","Page","Stack","ActionList","Avatar","ContextualSaveBar","FormLayout","Frame","Loading","Modal","Navigation","SkeletonBodyText","SkeletonDisplayText","SkeletonPage","TextContainer","TextField","Toast","TopBar","Link","Redirect","ArrowLeftMinor","NoteMajorMonotone","HomeMajorMonotone","OrdersMajorTwotone","MobileHamburgerMajorMonotone","ListMajorMonotone","BankMajorMonotone","TroubleshootMajorMonotone","SettingsMajorMonotone","Dropdown","AttCompany","props","initialFormState","id","code","label","Type","sortingorder","status","cartpage","registerpage","accountpage","ordergrid","customergrid","Atributo","setAtributo","handleInputChange","event","value","target","setUser","name","selectedTab","setSelectedTab","handleTabChange","selectedTabIndex","tabs","content","accessibilityLabel","panelID","options","selected","setSelected","handleChange","textFieldValue","setTextFieldValue","handleTextFieldChange","setValue","handleChangePh","newValue","valueDV","setValueDV","handleChangeDV","newValueDV","handleChangeNo","newValueNo","setValueNo","valueNo","checked","setChecked","handleChangeSingle","newChecked","preventDefault","addAtributo","helpText"],"mappings":"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","sourcesContent":["import React, {Fragment, useCallback, useState, useRef} from \"react\";\r\nimport 'react-dropdown/style.css';\r\nimport {Card, Form, Tabs, Checkbox, ChoiceList, Button, Heading,EmptyState, AppProvider,Layout,Page, Stack, ActionList,  Avatar, ContextualSaveBar, FormLayout,Frame, Loading,Modal, Navigation, SkeletonBodyText, SkeletonDisplayText, SkeletonPage, TextContainer, TextField, Toast, TopBar, Link} from \"@shopify/polaris\";\r\nimport { Redirect } from '@shopify/app-bridge/actions';\r\nimport {ArrowLeftMinor, NoteMajorMonotone, HomeMajorMonotone, OrdersMajorTwotone, MobileHamburgerMajorMonotone, ListMajorMonotone, BankMajorMonotone,TroubleshootMajorMonotone,SettingsMajorMonotone} from '@shopify/polaris-icons';\r\nimport Dropdown from 'react-dropdown';\r\n\r\n\r\nconst AttCompany = (props) =>{\r\n\r\n  const initialFormState = { id: null, code: '', label: '', Type:'', sortingorder:'', status:'', cartpage:'', registerpage:'', accountpage:'', ordergrid:'', customergrid:'', }\r\n  const [Atributo, setAtributo] = useState(initialFormState)\r\n\r\n  const handleInputChange = (event) => {\r\n    const { code, value } = event.target\r\n\r\n    setUser({ ...Atributo, [name]: value })\r\n  }\r\n\r\n  const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n  const handleTabChange = useCallback(\r\n    (selectedTabIndex) => setSelectedTab(selectedTabIndex),\r\n    [],\r\n  );\r\n  \r\n  const tabs = [\r\n    {\r\n      id: 'FormCompany',\r\n      content: 'Properties',\r\n      accessibilityLabel: 'All customers',\r\n      panelID: 'all-customers-content',\r\n    },\r\n  ];\r\n\r\n\r\n  const options = [\r\n    {label: 'None', value: 'None'},\r\n    {label: 'Decimal Number', value: 'Decimal Number'},\r\n    {label: 'Integer Number', value: 'Integer Number'},\r\n    {label: 'Email', value: 'Email'},\r\n    {label: 'URL', value: 'URL'},\r\n    {label: 'Letters', value: 'Letters'},\r\n    {label: 'Letters (a-z, A-Z) or Numbers (0-9) ', value: 'Letters (a-z, A-Z) or Numbers (0-9) '},\r\n    {label: 'Custom', value: 'Custom'},\r\n  ];\r\n\r\n  const [selected, setSelected] = useState(['hidden']);\r\n  const handleChange = useCallback((value) => setSelected(value), []);\r\n  \r\n  const [textFieldValue, setTextFieldValue] = useState('');\r\n  const handleTextFieldChange = useCallback(\r\n    (value) => setTextFieldValue(value),\r\n    [],\r\n  );\r\n\r\n  const [value, setValue] = useState('');\r\n  const handleChangePh = useCallback((newValue) => setValue(newValue), []);\r\n\r\n  const [valueDV, setValueDV] = useState('');\r\n  const handleChangeDV = useCallback((newValueDV) => setValueDV(newValueDV), []);\r\n\r\n  \r\n  const handleChangeNo = useCallback((newValueNo) => setValueNo(newValueNo), []);\r\n  const [valueNo, setValueNo] = useState('1');\r\n\r\n  \r\n  const [checked, setChecked] = useState(false);\r\n  const handleChangeSingle = useCallback((newChecked) => setChecked(newChecked), []);\r\n\r\n {/*navbar */}\r\n\r\n\r\nreturn( \r\n\r\n<>  \r\n    <Card sectioned title=\" Attribute Your company\">\r\n      <Stack distribution=\"leading\">\r\n        <Link url='/Index' >\r\n          Home\r\n        </Link>\r\n              \r\n        <Link url='/AttributesTemplates' >\r\n          Attributes Templates\r\n        </Link>\r\n          <p>Attribute</p>\r\n      </Stack>           \r\n    </Card>\r\n    <Stack distribution=\"trailing\">\r\n\r\n  <Button primary>\r\n    <Stack distribution=\"equalSpacing\">\r\n      <p>Add Attribute</p>\r\n    </Stack>\r\n  </Button>\r\n</Stack>   \r\n\r\n  <Page>\r\n    <Card>\r\n      <Tabs tabs={tabs} selected={selectedTab} onSelect={handleTabChange}>\r\n    <Card.Section >\r\n  \r\n      <form\r\n      onSubmit={(event) => {\r\n        event.preventDefault()\r\n      \r\n        if (!Atributo.code || !Atributo.label || !Atributo.Type || !Atributo.sortingorder || !Atributo.status || !Atributo.cartpage || !Atributo.registerpage || !Atributo.accountpage || !Atributo.ordergrid || !Atributo.customergrid) return\r\n\r\n        props.addAtributo(Atributo)\r\n        setAtributo(initialFormState)\r\n      }}>\r\n        <Card sectioned title=\"Attribute Properties\">\r\n        <hr/>\r\n\r\n          <TextField\r\n            label=\"Label*:\"\r\n            name=\"label\"\r\n            value={Atributo.label}\r\n            onChange={handleInputChange}\r\n            placeholder=\"Your Company\"/>\r\n          <p>Attribute label</p>\r\n          <br/>\r\n   \r\n          <TextField\r\n            label=\"Code:\"\r\n            placeholder=\"your-company\"\r\n            value={Atributo.code}\r\n            onChange={handleInputChange}\r\n            name=\"code\"\r\n            disabled/>\r\n          <p>For internal use. Must be unique with \r\n            no spaces and length  &lt;= 30. Let \r\n            it empty for auto generation</p>\r\n          <br/>\r\n\r\n        <TextField\r\n          label=\"Sorting Order:\"\r\n          type=\"number\"\r\n          value={valueNo}\r\n          onChange={handleChangeNo}/>\r\n        <p>Attributes are sorted in ascending \r\n          order (eg: Attribute with sorting order \r\n          1 will be displayed on top of Attribute 2)</p>\r\n        <br/>\r\n  \r\n          <p>Type*:</p>\r\n            <Dropdown placeholder=\"Text Field\" disabled />\r\n          <br/>\r\n   \r\n        <TextField\r\n          label=\"Default value:\"\r\n          value={valueDV}\r\n          onChange={handleChangeDV}/>\r\n        <p>The default value for this attribute when \r\n            it is shown to your customers</p>\r\n        <br/>\r\n\r\n        <TextField\r\n          label=\"Placeholder:\"\r\n          value={value}\r\n          onChange={handleChangePh}/>\r\n        <p>The placeholder specifies a short hint \r\n            that describes the expected value of \r\n            this field</p>\r\n        <br/>\r\n\r\n        <Checkbox\r\n          label=\"Values Required\"\r\n          checked={checked}\r\n          onChange={handleChangeSingle}/>\r\n          <p>Tick if this attribute is required to be \r\n             filled by your customers</p>\r\n        <br/>\r\n\r\n          <p>Input Validation:</p>\r\n            <Dropdown  options={options}   placeholder=\"None\"/>\r\n            <p>Attribute options is managed in tab \"Manage Options\" on the left.</p>\r\n          <br/>\r\n         \r\n            <br/>\r\n              <Heading>Attribute Configuration</Heading>    \r\n            <br/>\r\n            <hr/>\r\n  \r\n       \r\n          <ChoiceList\r\n              allowMultiple\r\n              choices={[\r\n                {\r\n                  label: 'Show on Cart page:',\r\n                  value: 'shipping',\r\n                  helpText:\r\n                    'Tick if you want to use this attribute on cart page.',\r\n                },\r\n                {\r\n                  label: 'Hide if filled:',\r\n                  value: 'confirmation',\r\n                  helpText:\r\n                    'Hide this attribute if it was filled before.',\r\n                },\r\n                {\r\n                  label: 'Show on Order grid:',\r\n                  value: 'shipping',\r\n                  helpText:\r\n                    'Tick if you want to use this attribute on order grid in app admin.',\r\n                },\r\n                {\r\n                  label: 'Show on Register page:',\r\n                  value: 'confirmation',\r\n                  helpText:\r\n                    'Tick if you want to use this attribute on register page.',\r\n                },\r\n                {\r\n                  label: 'Show on Customer grid',\r\n                  value: 'confirmation',\r\n                  helpText:\r\n                    'Tick if you want to use this attribute on customer grid in app admin',\r\n                },\r\n              ]}\r\n          selected={selected}\r\n          onChange={handleChange}/>\r\n          </Card>\r\n      </form>\r\n        </Card.Section>\r\n      </Tabs>\r\n    </Card>\r\n    <br/>\r\n  </Page>  \r\n</>\r\n)\r\n            }\r\n            export default AttCompany\r\n"]},"metadata":{},"sourceType":"module"}