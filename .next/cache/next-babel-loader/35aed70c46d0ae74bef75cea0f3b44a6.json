{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Fragment, useCallback, useState, useRef } from \"react\";\nimport 'react-dropdown/style.css';\nimport { Card, Tabs, Checkbox, ChoiceList, Button, Heading, EmptyState, Layout, Page, Stack, AppProvider, ActionList, Avatar, ContextualSaveBar, FormLayout, Form, Frame, Loading, Modal, Navigation, SkeletonBodyText, SkeletonDisplayText, SkeletonPage, TextContainer, TextField, Toast, TopBar, Link } from \"@shopify/polaris\";\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { ArrowLeftMinor, NoteMajorMonotone, HomeMajorMonotone, OrdersMajorTwotone, MobileHamburgerMajorMonotone, ListMajorMonotone, BankMajorMonotone, TroubleshootMajorMonotone, SettingsMajorMonotone } from '@shopify/polaris-icons';\nimport Dropdown from 'react-dropdown';\n\nvar AttCountry = function AttCountry(props) {\n  _s();\n\n  var _useState = useState(0),\n      selectedTab = _useState[0],\n      setSelectedTab = _useState[1];\n\n  var handleTabChange = useCallback(function (selectedTabIndex) {\n    return setSelectedTab(selectedTabIndex);\n  }, []);\n  var tabs = [{\n    id: 'FormCountry',\n    content: 'Properties',\n    accessibilityLabel: 'All customers',\n    panelID: 'all-customers-content'\n  }];\n\n  var _useState2 = useState(['hidden']),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var handleChange = useCallback(function (value) {\n    return setSelected(value);\n  }, []);\n\n  var _useState3 = useState(''),\n      textFieldValue = _useState3[0],\n      setTextFieldValue = _useState3[1];\n\n  var handleTextFieldChange = useCallback(function (value) {\n    return setTextFieldValue(value);\n  }, []);\n\n  var _useState4 = useState(''),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  var handleChangePh = useCallback(function (newValue) {\n    return setValue(newValue);\n  }, []);\n  var handleChangeNo = useCallback(function (newValueNo) {\n    return setValueNo(newValueNo);\n  }, []);\n\n  var _useState5 = useState('1'),\n      valueNo = _useState5[0],\n      setValueNo = _useState5[1];\n\n  var _useState6 = useState(false),\n      checked = _useState6[0],\n      setChecked = _useState6[1];\n\n  var handleChangeSingle = useCallback(function (newChecked) {\n    return setChecked(newChecked);\n  }, []);\n  {\n    /*navbar */\n  }\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    sectioned: true,\n    title: \" Attribute Country\"\n  }, __jsx(Stack, {\n    distribution: \"leading\"\n  }, __jsx(Link, {\n    url: \"/Index\"\n  }, \"Home\"), __jsx(Link, {\n    url: \"/AttributesTemplates\"\n  }, \"Attributes Templates\"), __jsx(\"p\", null, \"Attribute\"))), __jsx(Page, null, __jsx(Card, null, __jsx(Tabs, {\n    tabs: tabs,\n    selected: selectedTab,\n    onSelect: handleTabChange\n  }, __jsx(Card.Section, null, __jsx(Form, null, __jsx(Card, {\n    sectioned: true,\n    title: \"Attribute Properties\"\n  }, __jsx(\"hr\", null), __jsx(TextField, {\n    label: \"Label*:\",\n    value: textFieldValue,\n    onChange: handleTextFieldChange,\n    placeholder: \"Country\"\n  }), __jsx(\"p\", null, \"Attribute label\"), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"Code:\",\n    placeholder: \"country\",\n    disabled: true\n  }), __jsx(\"p\", null, \"For internal use. Must be unique with no spaces and length  <= 30. Let it empty for auto generation\"), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"Sorting Order:\",\n    type: \"number\",\n    value: valueNo,\n    onChange: handleChangeNo\n  }), __jsx(\"p\", null, \"Attributes are sorted in ascending order (eg: Attribute with sorting order 1 will be displayed on top of Attribute 2)\"), __jsx(\"br\", null), __jsx(\"p\", null, \"Type*:\"), __jsx(Dropdown, {\n    placeholder: \"Dropdown\",\n    disabled: true\n  }), __jsx(\"p\", null, \"Attribute options is managed in tab \\\"Manage Options\\\" on the left.\"), __jsx(\"br\", null), __jsx(Checkbox, {\n    label: \"Values Required\",\n    checked: checked,\n    onChange: handleChangeSingle\n  }), __jsx(\"p\", null, \"Tick if this attribute is required to be filled by your customers\"), __jsx(\"br\", null), __jsx(TextField, {\n    label: \"Placeholder:\",\n    value: value,\n    onChange: handleChangePh\n  }), __jsx(\"p\", null, \"The placeholder specifies a short hint that describes the expected value of this field\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(Heading, null, \"Attribute Configuration\"), __jsx(\"br\", null), __jsx(\"hr\", null), __jsx(ChoiceList, {\n    allowMultiple: true,\n    choices: [{\n      label: 'Show on Cart page:',\n      value: 'shipping',\n      helpText: 'Tick if you want to use this attribute on cart page.'\n    }, {\n      label: 'Show on Register page:',\n      value: 'confirmation',\n      helpText: 'Tick if you want to use this attribute on register page.'\n    }],\n    selected: selected,\n    onChange: handleChange\n  })))))), __jsx(\"br\", null)));\n};\n\n_s(AttCountry, \"a/+7mwh63wrTH9FlrM7UpusaZ6o=\");\n\n_c = AttCountry;\nexport default AttCountry;\n\nvar _c;\n\n$RefreshReg$(_c, \"AttCountry\");","map":{"version":3,"sources":["C:/Users/LENOVO THINKPAD/Documents/react_programs/ca-app/pages/AttributeCountry.js"],"names":["React","Fragment","useCallback","useState","useRef","Card","Tabs","Checkbox","ChoiceList","Button","Heading","EmptyState","Layout","Page","Stack","AppProvider","ActionList","Avatar","ContextualSaveBar","FormLayout","Form","Frame","Loading","Modal","Navigation","SkeletonBodyText","SkeletonDisplayText","SkeletonPage","TextContainer","TextField","Toast","TopBar","Link","Redirect","ArrowLeftMinor","NoteMajorMonotone","HomeMajorMonotone","OrdersMajorTwotone","MobileHamburgerMajorMonotone","ListMajorMonotone","BankMajorMonotone","TroubleshootMajorMonotone","SettingsMajorMonotone","Dropdown","AttCountry","props","selectedTab","setSelectedTab","handleTabChange","selectedTabIndex","tabs","id","content","accessibilityLabel","panelID","selected","setSelected","handleChange","value","textFieldValue","setTextFieldValue","handleTextFieldChange","setValue","handleChangePh","newValue","handleChangeNo","newValueNo","setValueNo","valueNo","checked","setChecked","handleChangeSingle","newChecked","label","helpText"],"mappings":"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","sourcesContent":["import React, {Fragment, useCallback, useState, useRef} from \"react\";\r\nimport 'react-dropdown/style.css';\r\nimport {Card, Tabs, Checkbox, ChoiceList, Button, Heading,EmptyState, Layout,Page, Stack, AppProvider,ActionList,  Avatar, ContextualSaveBar, FormLayout,Form,Frame, Loading,Modal, Navigation, SkeletonBodyText, SkeletonDisplayText, SkeletonPage, TextContainer, TextField, Toast, TopBar, Link} from \"@shopify/polaris\";\r\nimport { Redirect } from '@shopify/app-bridge/actions';\r\nimport {ArrowLeftMinor, NoteMajorMonotone, HomeMajorMonotone, OrdersMajorTwotone, MobileHamburgerMajorMonotone, ListMajorMonotone, BankMajorMonotone,TroubleshootMajorMonotone,SettingsMajorMonotone} from '@shopify/polaris-icons';\r\nimport Dropdown from 'react-dropdown';\r\n\r\n\r\nconst AttCountry = (props) =>{\r\n\r\n  const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n  const handleTabChange = useCallback(\r\n    (selectedTabIndex) => setSelectedTab(selectedTabIndex),\r\n    [],\r\n  );\r\n  \r\n  const tabs = [\r\n    {\r\n      id: 'FormCountry',\r\n      content: 'Properties',\r\n      accessibilityLabel: 'All customers',\r\n      panelID: 'all-customers-content',\r\n    },\r\n   \r\n  ];\r\n\r\n\r\n  const [selected, setSelected] = useState(['hidden']);\r\n  const handleChange = useCallback((value) => setSelected(value), []);\r\n \r\n  const [textFieldValue, setTextFieldValue] = useState('');\r\n  const handleTextFieldChange = useCallback(\r\n    (value) => setTextFieldValue(value),\r\n    [],\r\n  );\r\n\r\n  const [value, setValue] = useState('');\r\n  const handleChangePh = useCallback((newValue) => setValue(newValue), []);\r\n\r\n  \r\n  const handleChangeNo = useCallback((newValueNo) => setValueNo(newValueNo), []);\r\n  const [valueNo, setValueNo] = useState('1');\r\n\r\n  const [checked, setChecked] = useState(false);\r\n  const handleChangeSingle = useCallback((newChecked) => setChecked(newChecked), []);\r\n  \r\n    {/*navbar */}\r\n\r\nreturn(\r\n<>\r\n  <Card sectioned title=\" Attribute Country\">\r\n    <Stack distribution=\"leading\">\r\n      <Link url='/Index' >\r\n        Home\r\n      </Link>\r\n           \r\n      <Link url='/AttributesTemplates' >\r\n        Attributes Templates\r\n      </Link>\r\n        <p>Attribute</p>\r\n    </Stack>        \r\n  </Card>\r\n        \r\n<Page>       \r\n  <Card>\r\n    <Tabs tabs={tabs} selected={selectedTab} onSelect={handleTabChange}>\r\n      <Card.Section >\r\n        <Form>\r\n          <Card sectioned title=\"Attribute Properties\">\r\n          <hr/>\r\n\r\n            <TextField\r\n              label=\"Label*:\"\r\n              value={textFieldValue}\r\n              onChange={handleTextFieldChange}\r\n              placeholder=\"Country\"/>\r\n            <p>Attribute label</p>\r\n            <br/>\r\n        \r\n            <TextField\r\n              label=\"Code:\"\r\n              placeholder=\"country\"\r\n              disabled/>\r\n            <p>For internal use. Must be unique with \r\n              no spaces and length  &lt;= 30. Let \r\n              it empty for auto generation</p>\r\n            <br/>\r\n            \r\n            <TextField\r\n              label=\"Sorting Order:\"\r\n              type=\"number\"\r\n              value={valueNo}\r\n              onChange={handleChangeNo}/>\r\n            <p>Attributes are sorted in ascending \r\n              order (eg: Attribute with sorting order \r\n              1 will be displayed on top of Attribute 2)</p>\r\n            <br/>\r\n  \r\n                <p>Type*:</p>\r\n                  <Dropdown placeholder=\"Dropdown\" disabled />\r\n                  <p>Attribute options is managed in tab \"Manage Options\" on the left.</p>\r\n                <br/>\r\n\r\n            <Checkbox\r\n                label=\"Values Required\"\r\n                checked={checked}\r\n                onChange={handleChangeSingle}/>\r\n              <p>Tick if this attribute is required to be \r\n                  filled by your customers</p>\r\n              <br/>\r\n\r\n            <TextField\r\n              label=\"Placeholder:\"\r\n              value={value}\r\n              onChange={handleChangePh}/>\r\n            <p>The placeholder specifies a short hint \r\n                that describes the expected value of \r\n                this field</p>\r\n            <br/>\r\n      \r\n                  <br/>\r\n                  <Heading>Attribute Configuration</Heading>    \r\n                  <br/>\r\n                  <hr/>\r\n  \r\n          \r\n            <ChoiceList\r\n                  allowMultiple\r\n                  choices={[\r\n                    {\r\n                      label: 'Show on Cart page:',\r\n                      value: 'shipping',\r\n                      helpText:\r\n                        'Tick if you want to use this attribute on cart page.',\r\n                    },\r\n                    {\r\n                      label: 'Show on Register page:',\r\n                      value: 'confirmation',\r\n                      helpText:\r\n                        'Tick if you want to use this attribute on register page.',\r\n                    },\r\n                  ]}\r\n                  selected={selected}\r\n                  onChange={handleChange}/>\r\n            </Card>\r\n          </Form>\r\n        </Card.Section>\r\n      </Tabs>\r\n    </Card>\r\n    <br/>\r\n  </Page>\r\n</>\r\n  \r\n)\r\n}\r\n\r\nexport default AttCountry"]},"metadata":{},"sourceType":"module"}