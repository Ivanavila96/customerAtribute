{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Fragment, useCallback, useState, useRef, Component } from \"react\";\nimport Dropdown from './Drop1';\nimport 'react-dropdown/style.css';\nimport { Card, ChoiceList, Button, Heading, EmptyState, Layout, Page, Stack, ActionList, Avatar, ContextualSaveBar, FormLayout, Frame, Loading, Modal, Navigation, SkeletonBodyText, SkeletonDisplayText, SkeletonPage, TextContainer, TextField, Toast, TopBar, Link } from \"@shopify/polaris\";\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { ArrowLeftMinor, NoteMajorMonotone, HomeMajorMonotone, OrdersMajorTwotone, MobileHamburgerMajorMonotone, ListMajorMonotone, BankMajorMonotone, TroubleshootMajorMonotone, SettingsMajorMonotone } from '@shopify/polaris-icons';\nimport AppProvider from './navbar.js';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      dias: ['Lunes', 'Mi√©rcoles']\n    };\n    _this.cambioDia = _this.cambioDia.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(\"p\", null, __jsx(\"select\", {\n        multiple: true,\n        value: this.state.dias,\n        onChange: this.cambioDia\n      }, __jsx(\"option\", null, \"Lunes\"), __jsx(\"option\", null, \"Martes\"), __jsx(\"option\", null, \"Mi\\xE9rcoles\"), __jsx(\"option\", null, \"Jueves\"), __jsx(\"option\", null, \"Viernes\"), __jsx(\"option\", null, \"S\\xE1bado\"), __jsx(\"option\", null, \"Domingo\"))), \"D\\xEDa seleccionado:\", this.state.dias.map(function (elemento) {\n        return __jsx(\"p\", null, elemento);\n      }));\n    }\n  }, {\n    key: \"cambioDia\",\n    value: function cambioDia(e) {\n      var opciones = e.target.options;\n      var seleccionadas = [];\n\n      for (var i = 0; i < opciones.length; i++) {\n        if (opciones[i].selected) {\n          seleccionadas.push(opciones[i].value);\n        }\n      }\n\n      this.setState({\n        dias: seleccionadas\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n\nvar _useState = useState(['hidden']),\n    selected = _useState[0],\n    setSelected = _useState[1];\n\nvar handleChange = useCallback(function (value) {\n  return setSelected(value);\n}, []);\n\n__jsx(React.Fragment, null, __jsx(Card, {\n  sectioned: true,\n  title: \" Create attribute\"\n}, __jsx(Stack, {\n  distribution: \"leading\"\n}, __jsx(Link, {\n  url: \"/Index\"\n}, \"Home\"), __jsx(Link, {\n  url: \"/componenteslist\"\n}, \"Attributes\"), __jsx(\"p\", null, \"Attribute\"))), __jsx(Page, null, __jsx(FormLayout, null, __jsx(Card, {\n  sectioned: true\n}, __jsx(\"p\", null, \"Use Template:\"), __jsx(Stack, {\n  distribution: \"fillEvenly\"\n}, __jsx(Dropdown, {\n  id: \"drop1\"\n}), __jsx(\"p\", null, \"If you choose a template, the following attribute fields will be filled\", __jsx(\"br\", null), \"automatically. Or you can leave this\", __jsx(\"br\", null), \"box blank and create your unique field\", __jsx(\"br\", null), \"by filling in these boxes.\")), __jsx(\"hr\", null), __jsx(\"br\", null), __jsx(Heading, null, \"Online store dashboard\"), __jsx(\"br\", null), __jsx(\"hr\", null), __jsx(\"br\", null), __jsx(TextField, {\n  label: \"Label*:\",\n  placeholder: \"Attribute Label\"\n}), __jsx(\"p\", null, \"Attribute label\"), __jsx(\"br\", null), __jsx(TextField, {\n  label: \"Code:\"\n}), __jsx(\"p\", null, \"For internal use. Must be unique with no spaces and length  30. Let it empty for auto generation\"), __jsx(TextField, {\n  label: \"Quantity\",\n  type: \"number\"\n}), __jsx(\"br\", null), __jsx(\"p\", null, \"Type*:\"), __jsx(Dropdown, {\n  id: \"drop2\"\n}), __jsx(\"br\", null), __jsx(Heading, null, \"Attribute Configuration\"), __jsx(\"br\", null), __jsx(\"hr\", null), __jsx(ChoiceList, {\n  allowMultiple: true,\n  choices: [{\n    label: 'Show on Cart page:',\n    value: 'shipping',\n    helpText: 'Tick if you want to use this attribute on cart page.'\n  }, {\n    label: 'Hide if filled:',\n    value: 'confirmation',\n    helpText: 'Hide this attribute if it was filled before.'\n  }, {\n    label: 'Show on Order grid:',\n    value: 'shipping',\n    helpText: 'Tick if you want to use this attribute on order grid in app admin.'\n  }, {\n    label: 'Show on Register page:',\n    value: 'confirmation',\n    helpText: 'Tick if you want to use this attribute on register page.'\n  }, {\n    label: 'Show on Customer grid',\n    value: 'confirmation',\n    helpText: 'Tick if you want to use this attribute on customer grid in app admin'\n  }],\n  selected: selected,\n  onChange: handleChange\n})))));","map":{"version":3,"sources":["C:/Users/LENOVO THINKPAD/Documents/react_programs/ca-app/pages/AttributeCreation.js"],"names":["React","Fragment","useCallback","useState","useRef","Component","Dropdown","Card","ChoiceList","Button","Heading","EmptyState","Layout","Page","Stack","ActionList","Avatar","ContextualSaveBar","FormLayout","Frame","Loading","Modal","Navigation","SkeletonBodyText","SkeletonDisplayText","SkeletonPage","TextContainer","TextField","Toast","TopBar","Link","Redirect","ArrowLeftMinor","NoteMajorMonotone","HomeMajorMonotone","OrdersMajorTwotone","MobileHamburgerMajorMonotone","ListMajorMonotone","BankMajorMonotone","TroubleshootMajorMonotone","SettingsMajorMonotone","AppProvider","App","props","state","dias","cambioDia","bind","map","elemento","e","opciones","target","options","seleccionadas","i","length","selected","push","value","setState","setSelected","handleChange","label","helpText"],"mappings":"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","sourcesContent":["import React, {Fragment, useCallback, useState, useRef, Component} from \"react\";\r\nimport Dropdown from './Drop1';\r\nimport 'react-dropdown/style.css';\r\nimport {Card, ChoiceList, Button, Heading,EmptyState, Layout,Page, Stack, ActionList, Avatar, ContextualSaveBar, FormLayout,Frame, Loading,Modal, Navigation, SkeletonBodyText, SkeletonDisplayText, SkeletonPage, TextContainer, TextField, Toast, TopBar, Link} from \"@shopify/polaris\";\r\nimport { Redirect } from '@shopify/app-bridge/actions';\r\nimport {ArrowLeftMinor, NoteMajorMonotone, HomeMajorMonotone, OrdersMajorTwotone, MobileHamburgerMajorMonotone, ListMajorMonotone, BankMajorMonotone,TroubleshootMajorMonotone,SettingsMajorMonotone} from '@shopify/polaris-icons';\r\nimport AppProvider from './navbar.js';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dias: ['Lunes','Mi√©rcoles']\r\n    }\r\n    this.cambioDia = this.cambioDia.bind(this);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p><select multiple value={this.state.dias} onChange={this.cambioDia}>\r\n        <option>Lunes</option>    \r\n        <option>Martes</option>\r\n        <option>Mi√©rcoles</option>\r\n        <option>Jueves</option>\r\n        <option>Viernes</option>\r\n        <option>S√°bado</option>\r\n        <option>Domingo</option>\r\n        </select></p>\r\n        D√≠a seleccionado:{this.state.dias.map((elemento)=>{\r\n          return (<p>{elemento}</p>)\r\n        }\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  cambioDia(e) {\r\n    const opciones = e.target.options;\r\n    const seleccionadas = [];\r\n    for (let i = 0; i < opciones.length; i++) {\r\n      if (opciones[i].selected) {\r\n        seleccionadas.push(opciones[i].value);\r\n      }      \r\n    }    \r\n    this.setState({\r\n      dias: seleccionadas\r\n    })\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n  \r\n  const [selected, setSelected] = useState(['hidden']);\r\n\r\n  const handleChange = useCallback((value) => setSelected(value), []);\r\n\r\n\r\n\r\n<>\r\n\r\n  <Card sectioned title=\" Create attribute\">\r\n  <Stack distribution=\"leading\">\r\n  <Link url='/Index' >\r\n  Home\r\n  </Link>\r\n           \r\n  <Link url='/componenteslist' >\r\n  Attributes\r\n</Link>\r\n\r\n<p>\r\n  Attribute\r\n</p>\r\n</Stack>\r\n            \r\n        </Card>\r\n        <Page>\r\n  \r\n  \r\n       \r\n  \r\n  \r\n  <FormLayout>\r\n      <Card sectioned>\r\n      \r\n      <p>Use Template:</p>\r\n      <Stack distribution=\"fillEvenly\">\r\n  \r\n      <Dropdown id=\"drop1\"/>\r\n     \r\n      <p>If you choose a template, the following \r\n        attribute fields will be filled \r\n        <br/>\r\n        automatically. Or you can leave this \r\n        <br/>\r\n        box blank and create your unique field \r\n        <br/>\r\n        by filling in these boxes.</p>\r\n      </Stack>\r\n      <hr/>\r\n      <br/>\r\n      <Heading>Online store dashboard</Heading>    \r\n      <br/>\r\n      <hr/>\r\n      <br/>\r\n  \r\n      <TextField\r\n        label=\"Label*:\"\r\n        placeholder=\"Attribute Label\"\r\n      />\r\n      <p>Attribute label</p>\r\n      <br/>\r\n  \r\n      <TextField\r\n        label=\"Code:\"\r\n      />\r\n      <p>For internal use. Must be unique with \r\n        no spaces and length  30. Let \r\n        it empty for auto generation</p>\r\n  \r\n        <TextField\r\n        label=\"Quantity\"\r\n        type=\"number\"\r\n      />\r\n      <br/>\r\n  \r\n        <p>Type*:</p>\r\n  \r\n      <Dropdown id=\"drop2\"/>\r\n  \r\n      <br/>\r\n      <Heading>Attribute Configuration</Heading>    \r\n      <br/>\r\n        <hr/>\r\n  \r\n       \r\n        <ChoiceList\r\n      allowMultiple\r\n      choices={[\r\n        {\r\n          label: 'Show on Cart page:',\r\n          value: 'shipping',\r\n          helpText:\r\n            'Tick if you want to use this attribute on cart page.',\r\n        },\r\n        {\r\n          label: 'Hide if filled:',\r\n          value: 'confirmation',\r\n          helpText:\r\n            'Hide this attribute if it was filled before.',\r\n        },\r\n        {\r\n          label: 'Show on Order grid:',\r\n          value: 'shipping',\r\n          helpText:\r\n            'Tick if you want to use this attribute on order grid in app admin.',\r\n        },\r\n        {\r\n          label: 'Show on Register page:',\r\n          value: 'confirmation',\r\n          helpText:\r\n            'Tick if you want to use this attribute on register page.',\r\n        },\r\n        {\r\n          label: 'Show on Customer grid',\r\n          value: 'confirmation',\r\n          helpText:\r\n            'Tick if you want to use this attribute on customer grid in app admin',\r\n        },\r\n      ]}\r\n      selected={selected}\r\n      onChange={handleChange}\r\n    />\r\n      </Card>\r\n\r\n\r\n  \r\n      </FormLayout>\r\n  \r\n  </Page>\r\n  \r\n  </>\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}