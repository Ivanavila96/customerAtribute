{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, Button, Container, Modal, ModalHeader, ModalBody, FormGroup, ModalFooter } from \"reactstrap\";\nconst data = [{\n  id: 1,\n  personaje: \"Naruto\",\n  anime: \"Naruto\"\n}, {\n  id: 2,\n  personaje: \"Goku\",\n  anime: \"Dragon Ball\"\n}, {\n  id: 3,\n  personaje: \"Kenshin Himura\",\n  anime: \"Rurouni Kenshin\"\n}, {\n  id: 4,\n  personaje: \"Monkey D. Luffy\",\n  anime: \"One Piece\"\n}, {\n  id: 5,\n  personaje: \"Edward Elric\",\n  anime: \"Fullmetal Alchemist: Brotherhood\"\n}, {\n  id: 6,\n  personaje: \"Seto Kaiba\",\n  anime: \"Yu-Gi-Oh!\"\n}];\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: data,\n      modalActualizar: false,\n      modalInsertar: false,\n      form: {\n        id: \"\",\n        personaje: \"\",\n        anime: \"\"\n      }\n    });\n\n    _defineProperty(this, \"mostrarModalActualizar\", dato => {\n      this.setState({\n        form: dato,\n        modalActualizar: true\n      });\n    });\n\n    _defineProperty(this, \"cerrarModalActualizar\", () => {\n      this.setState({\n        modalActualizar: false\n      });\n    });\n\n    _defineProperty(this, \"mostrarModalInsertar\", () => {\n      this.setState({\n        modalInsertar: true\n      });\n    });\n\n    _defineProperty(this, \"cerrarModalInsertar\", () => {\n      this.setState({\n        modalInsertar: false\n      });\n    });\n\n    _defineProperty(this, \"editar\", dato => {\n      var contador = 0;\n      var arreglo = this.state.data;\n      arreglo.map(registro => {\n        if (dato.id == registro.id) {\n          arreglo[contador].personaje = dato.personaje;\n          arreglo[contador].anime = dato.anime;\n        }\n\n        contador++;\n      });\n      this.setState({\n        data: arreglo,\n        modalActualizar: false\n      });\n    });\n\n    _defineProperty(this, \"eliminar\", dato => {\n      var opcion = window.confirm(\"EstÃ¡s Seguro que deseas Eliminar el elemento \" + dato.id);\n\n      if (opcion == true) {\n        var contador = 0;\n        var arreglo = this.state.data;\n        arreglo.map(registro => {\n          if (dato.id == registro.id) {\n            arreglo.splice(contador, 1);\n          }\n\n          contador++;\n        });\n        this.setState({\n          data: arreglo,\n          modalActualizar: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"insertar\", () => {\n      var valorNuevo = _objectSpread({}, this.state.form);\n\n      valorNuevo.id = this.state.data.length + 1;\n      var lista = this.state.data;\n      lista.push(valorNuevo);\n      this.setState({\n        modalInsertar: false,\n        data: lista\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      this.setState({\n        form: _objectSpread(_objectSpread({}, this.state.form), {}, {\n          [e.target.name]: e.target.value\n        })\n      });\n    });\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Container, null, __jsx(\"br\", null), __jsx(Button, {\n      color: \"success\",\n      onClick: () => this.mostrarModalInsertar()\n    }, \"Crear\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(Table, null, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"ID\"), __jsx(\"th\", null, \"Personaje\"), __jsx(\"th\", null, \"Anime\"), __jsx(\"th\", null, \"Acci\\xF3n\"))), __jsx(\"tbody\", null, this.state.data.map(dato => __jsx(\"tr\", {\n      key: dato.id\n    }, __jsx(\"td\", null, dato.id), __jsx(\"td\", null, dato.personaje), __jsx(\"td\", null, dato.anime), __jsx(\"td\", null, __jsx(Button, {\n      color: \"primary\",\n      onClick: () => this.mostrarModalActualizar(dato)\n    }, \"Editar\"), \" \", __jsx(Button, {\n      color: \"danger\",\n      onClick: () => this.eliminar(dato)\n    }, \"Eliminar\"))))))), __jsx(Modal, {\n      isOpen: this.state.modalActualizar\n    }, __jsx(ModalHeader, null, __jsx(\"div\", null, __jsx(\"h3\", null, \"Editar Registro\"))), __jsx(ModalBody, null, __jsx(FormGroup, null, __jsx(\"label\", null, \"Id:\"), __jsx(\"input\", {\n      className: \"form-control\",\n      readOnly: true,\n      type: \"text\",\n      value: this.state.form.id\n    })), __jsx(FormGroup, null, __jsx(\"label\", null, \"Personaje:\"), __jsx(\"input\", {\n      className: \"form-control\",\n      name: \"personaje\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.form.personaje\n    })), __jsx(FormGroup, null, __jsx(\"label\", null, \"Anime:\"), __jsx(\"input\", {\n      className: \"form-control\",\n      name: \"anime\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.form.anime\n    }))), __jsx(ModalFooter, null, __jsx(Button, {\n      color: \"primary\",\n      onClick: () => this.editar(this.state.form)\n    }, \"Editar\"), __jsx(Button, {\n      color: \"danger\",\n      onClick: () => this.cerrarModalActualizar()\n    }, \"Cancelar\"))), __jsx(Modal, {\n      isOpen: this.state.modalInsertar\n    }, __jsx(ModalHeader, null, __jsx(\"div\", null, __jsx(\"h3\", null, \"Insertar Personaje\"))), __jsx(ModalBody, null, __jsx(FormGroup, null, __jsx(\"label\", null, \"Id:\"), __jsx(\"input\", {\n      className: \"form-control\",\n      readOnly: true,\n      type: \"text\",\n      value: this.state.data.length + 1\n    })), __jsx(FormGroup, null, __jsx(\"label\", null, \"Personaje:\"), __jsx(\"input\", {\n      className: \"form-control\",\n      name: \"personaje\",\n      type: \"text\",\n      onChange: this.handleChange\n    })), __jsx(FormGroup, null, __jsx(\"label\", null, \"Anime:\"), __jsx(\"input\", {\n      className: \"form-control\",\n      name: \"anime\",\n      type: \"text\",\n      onChange: this.handleChange\n    }))), __jsx(ModalFooter, null, __jsx(Button, {\n      color: \"primary\",\n      onClick: () => this.insertar()\n    }, \"Insertar\"), __jsx(Button, {\n      className: \"btn btn-danger\",\n      onClick: () => this.cerrarModalInsertar()\n    }, \"Cancelar\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/LENOVO THINKPAD/Documents/react_programs/ca-app/pages/AttributesTemplates.js"],"names":["React","Table","Button","Container","Modal","ModalHeader","ModalBody","FormGroup","ModalFooter","data","id","personaje","anime","App","Component","modalActualizar","modalInsertar","form","dato","setState","contador","arreglo","state","map","registro","opcion","window","confirm","splice","valorNuevo","length","lista","push","e","target","name","value","render","mostrarModalInsertar","mostrarModalActualizar","eliminar","handleChange","editar","cerrarModalActualizar","insertar","cerrarModalInsertar"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Table,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  FormGroup,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\n\r\nconst data = [\r\n  { id: 1, personaje: \"Naruto\", anime: \"Naruto\" },\r\n  { id: 2, personaje: \"Goku\", anime: \"Dragon Ball\" },\r\n  { id: 3, personaje: \"Kenshin Himura\", anime: \"Rurouni Kenshin\" },\r\n  { id: 4, personaje: \"Monkey D. Luffy\", anime: \"One Piece\" },\r\n  { id: 5, personaje: \"Edward Elric\", anime: \"Fullmetal Alchemist: Brotherhood\"},\r\n  { id: 6, personaje: \"Seto Kaiba\", anime: \"Yu-Gi-Oh!\" },\r\n];\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: data,\r\n    modalActualizar: false,\r\n    modalInsertar: false,\r\n    form: {\r\n      id: \"\",\r\n      personaje: \"\",\r\n      anime: \"\",\r\n    },\r\n  };\r\n\r\n  mostrarModalActualizar = (dato) => {\r\n    this.setState({\r\n      form: dato,\r\n      modalActualizar: true,\r\n    });\r\n  };\r\n\r\n  cerrarModalActualizar = () => {\r\n    this.setState({ modalActualizar: false });\r\n  };\r\n\r\n  mostrarModalInsertar = () => {\r\n    this.setState({\r\n      modalInsertar: true,\r\n    });\r\n  };\r\n\r\n  cerrarModalInsertar = () => {\r\n    this.setState({ modalInsertar: false });\r\n  };\r\n\r\n  editar = (dato) => {\r\n    var contador = 0;\r\n    var arreglo = this.state.data;\r\n    arreglo.map((registro) => {\r\n      if (dato.id == registro.id) {\r\n        arreglo[contador].personaje = dato.personaje;\r\n        arreglo[contador].anime = dato.anime;\r\n      }\r\n      contador++;\r\n    });\r\n    this.setState({ data: arreglo, modalActualizar: false });\r\n  };\r\n\r\n  eliminar = (dato) => {\r\n    var opcion = window.confirm(\"EstÃ¡s Seguro que deseas Eliminar el elemento \"+dato.id);\r\n    if (opcion == true) {\r\n      var contador = 0;\r\n      var arreglo = this.state.data;\r\n      arreglo.map((registro) => {\r\n        if (dato.id == registro.id) {\r\n          arreglo.splice(contador, 1);\r\n        }\r\n        contador++;\r\n      });\r\n      this.setState({ data: arreglo, modalActualizar: false });\r\n    }\r\n  };\r\n\r\n  insertar= ()=>{\r\n    var valorNuevo= {...this.state.form};\r\n    valorNuevo.id=this.state.data.length+1;\r\n    var lista= this.state.data;\r\n    lista.push(valorNuevo);\r\n    this.setState({ modalInsertar: false, data: lista });\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      form: {\r\n        ...this.state.form,\r\n        [e.target.name]: e.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <>\r\n        <Container>\r\n        <br />\r\n          <Button color=\"success\" onClick={()=>this.mostrarModalInsertar()}>Crear</Button>\r\n          <br />\r\n          <br />\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Personaje</th>\r\n                <th>Anime</th>\r\n                <th>AcciÃ³n</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {this.state.data.map((dato) => (\r\n                <tr key={dato.id}>\r\n                  <td>{dato.id}</td>\r\n                  <td>{dato.personaje}</td>\r\n                  <td>{dato.anime}</td>\r\n                  <td>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      onClick={() => this.mostrarModalActualizar(dato)}\r\n                    >\r\n                      Editar\r\n                    </Button>{\" \"}\r\n                    <Button color=\"danger\" onClick={()=> this.eliminar(dato)}>Eliminar</Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n\r\n        <Modal isOpen={this.state.modalActualizar}>\r\n          <ModalHeader>\r\n           <div><h3>Editar Registro</h3></div>\r\n          </ModalHeader>\r\n\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <label>\r\n               Id:\r\n              </label>\r\n            \r\n              <input\r\n                className=\"form-control\"\r\n                readOnly\r\n                type=\"text\"\r\n                value={this.state.form.id}\r\n              />\r\n            </FormGroup>\r\n            \r\n            <FormGroup>\r\n              <label>\r\n                Personaje: \r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"personaje\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n                value={this.state.form.personaje}\r\n              />\r\n            </FormGroup>\r\n            \r\n            <FormGroup>\r\n              <label>\r\n                Anime: \r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"anime\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n                value={this.state.form.anime}\r\n              />\r\n            </FormGroup>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => this.editar(this.state.form)}\r\n            >\r\n              Editar\r\n            </Button>\r\n            <Button\r\n              color=\"danger\"\r\n              onClick={() => this.cerrarModalActualizar()}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n\r\n\r\n        <Modal isOpen={this.state.modalInsertar}>\r\n          <ModalHeader>\r\n           <div><h3>Insertar Personaje</h3></div>\r\n          </ModalHeader>\r\n\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <label>\r\n                Id: \r\n              </label>\r\n              \r\n              <input\r\n                className=\"form-control\"\r\n                readOnly\r\n                type=\"text\"\r\n                value={this.state.data.length+1}\r\n              />\r\n            </FormGroup>\r\n            \r\n            <FormGroup>\r\n              <label>\r\n                Personaje: \r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"personaje\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n            \r\n            <FormGroup>\r\n              <label>\r\n                Anime: \r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"anime\"\r\n                type=\"text\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => this.insertar()}\r\n            >\r\n              Insertar\r\n            </Button>\r\n            <Button\r\n              className=\"btn btn-danger\"\r\n              onClick={() => this.cerrarModalInsertar()}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}